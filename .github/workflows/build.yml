name: Tonnikala

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13", "3.14-dev"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade pytest pytest-cov coveralls twine flake8
          python -m pip install -e .[javascript]
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 tonnikala tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 tonnikala tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Install debugging tools for 3.14-dev
        if: matrix.python-version == '3.14-dev'
        run: |
          sudo apt-get update
          sudo apt-get install -y gdb libc6-dbg
      - name: Test with pytest
        run: |
          python -m pip freeze
          if [[ "${{ matrix.python-version }}" == "3.14-dev" ]]; then
            echo "Running with debugging for Python 3.14-dev"
            echo "Python version info:"
            python -c "import sys; print(sys.version)"
            echo "Testing basic imports first..."
            python -c "import tonnikala; print('Basic tonnikala import: OK')" || echo "Basic import failed"
            echo "Testing C extension import..."
            python -c "from tonnikala.runtime._buffer import Buffer; print('C extension: OK')" || echo "C extension failed"
            echo "Testing JavaScript loader..."
            python -c "from tonnikala.loader import JSLoader; print('JSLoader import: OK')" || echo "JSLoader import failed"
            echo "Running single test to isolate issue..."
            ulimit -c unlimited
            echo "Core pattern:"
            cat /proc/sys/kernel/core_pattern || echo "Cannot read core pattern"
            echo "First try without C extension to see if that's the issue..."
            echo "Temporarily renaming C extension to force fallback to Python implementation..."
            find . -name "_buffer*.so" -exec mv {} {}.disabled \; 2>/dev/null || echo "No C extension .so files found"
            echo "Testing without C extension:"
            timeout 30 python -m pytest tests/ -x -q || echo "Tests failed even without C extension"

            echo "Now restoring C extension and trying with memory debugging..."
            find . -name "_buffer*.so.disabled" -exec bash -c 'mv "$1" "${1%.disabled}"' _ {} \; 2>/dev/null || echo "No disabled .so files to restore"
            export PYTHONMALLOC=debug
            export PYTHONDEVMODE=1

            echo "Running each test file individually to isolate the problematic one..."
            for test_file in tests/test_*.py; do
              if [ -f "$test_file" ]; then
                echo "Running $test_file..."
                timeout 15 python -m pytest "$test_file" -x -q || {
                  exit_code=$?
                  echo "FAILED: $test_file (exit code: $exit_code)"
                  if [ $exit_code -eq 139 ]; then
                    echo "SEGFAULT in $test_file - this is the problematic test!"
                    echo "Checking for core dumps..."
                    ls -la core* /var/lib/systemd/coredump/core* 2>/dev/null || echo "No core dumps found"
                    echo "dmesg output:"
                    dmesg | tail -10 | grep -i "segfault\|killed\|signal" || echo "No segfault info in dmesg"
                    exit 1
                  fi
                }
              fi
            done
            echo "All individual test files passed - running full suite..."
            timeout 60 python -m pytest tests/ -x -v --tb=short || {
              exit_code=$?
              echo "Full suite failed with exit code: $exit_code"
              exit 1
            }
          else
            python -m pytest
          fi
